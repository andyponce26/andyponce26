{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/andyponce26/andyponce26/blob/main/Andy%20Ponce%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "IQOdew3DbUt0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from mpl_toolkits.mplot3d.art3d import Poly3DCollection\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, clear_output\n",
        "\n",
        "# Forma de la letra J\n",
        "j_shape = np.array([\n",
        "    [0.5, 0], [0.2, 0.2], [0, 0.5], [0, 1],\n",
        "    [0.3, 1.2], [0.7, 1.2], [1, 1], [1, 4],\n",
        "    [1.5, 4], [1.5, 0], [1.2, 0], [1.1, 0.1],\n",
        "    [1.0, 0], [0.5, 0]\n",
        "])\n",
        "\n",
        "depth = 0.5\n",
        "angle_x, angle_y, angle_z = 0, 0, 0\n",
        "\n",
        "# Matrices de rotación\n",
        "def rotation_matrix_x(angle):\n",
        "    rad = np.radians(angle)\n",
        "    return np.array([\n",
        "        [1, 0, 0],\n",
        "        [0, np.cos(rad), -np.sin(rad)],\n",
        "        [0, np.sin(rad),  np.cos(rad)]\n",
        "    ])\n",
        "\n",
        "def rotation_matrix_y(angle):\n",
        "    rad = np.radians(angle)\n",
        "    return np.array([\n",
        "        [np.cos(rad), 0, np.sin(rad)],\n",
        "        [0, 1, 0],\n",
        "        [-np.sin(rad), 0, np.cos(rad)]\n",
        "    ])\n",
        "\n",
        "def rotation_matrix_z(angle):\n",
        "    rad = np.radians(angle)\n",
        "    return np.array([\n",
        "        [np.cos(rad), -np.sin(rad), 0],\n",
        "        [np.sin(rad),  np.cos(rad), 0],\n",
        "        [0, 0, 1]\n",
        "    ])\n",
        "\n",
        "def apply_rotation(points, rx, ry, rz):\n",
        "    R = rotation_matrix_x(rx) @ rotation_matrix_y(ry) @ rotation_matrix_z(rz)\n",
        "    return points @ R.T\n",
        "\n",
        "def extrude_shape(shape, depth):\n",
        "    front = np.array([[x, y, 0] for x, y in shape])\n",
        "    back = np.array([[x, y, depth] for x, y in shape])\n",
        "    sides = []\n",
        "    for i in range(len(shape) - 1):\n",
        "        sides.append([front[i], front[i+1], back[i+1], back[i]])\n",
        "    return front, back, sides\n",
        "\n",
        "# Contenedor de salida\n",
        "out = widgets.Output()\n",
        "\n",
        "# Función para dibujar\n",
        "def draw_letter(rx, ry, rz):\n",
        "    with out:\n",
        "        clear_output(wait=True)\n",
        "        fig = plt.figure(figsize=(10, 7))\n",
        "        ax = fig.add_subplot(111, projection='3d')\n",
        "        front, back, sides = extrude_shape(j_shape, depth)\n",
        "        front_rot = apply_rotation(front, rx, ry, rz)\n",
        "        back_rot = apply_rotation(back, rx, ry, rz)\n",
        "        sides_rot = [apply_rotation(np.array(s), rx, ry, rz) for s in sides]\n",
        "\n",
        "        poly3d = [front_rot, back_rot] + sides_rot\n",
        "        colors = ['tomato', 'salmon'] + ['orangered'] * len(sides_rot)\n",
        "        ax.add_collection3d(Poly3DCollection(poly3d, facecolors=colors, edgecolors='k'))\n",
        "\n",
        "        ax.set_xlim(-2, 3)\n",
        "        ax.set_ylim(-2, 5)\n",
        "        ax.set_zlim(-1, 2)\n",
        "        ax.view_init(elev=30, azim=30)\n",
        "        ax.set_title(f\"Letra J en 3D\\nRotación: X={rx}° Y={ry}° Z={rz}°\")\n",
        "        plt.show()\n",
        "\n",
        "# Cuadros para ingresar ángulos\n",
        "input_x = widgets.IntText(value=0, description='Ángulo X:', style={'description_width': 'initial'})\n",
        "input_y = widgets.IntText(value=0, description='Ángulo Y:', style={'description_width': 'initial'})\n",
        "input_z = widgets.IntText(value=0, description='Ángulo Z:', style={'description_width': 'initial'})\n",
        "\n",
        "# Funciones de rotación personalizadas\n",
        "def rotar_x(b):\n",
        "    global angle_x\n",
        "    angle_x = input_x.value\n",
        "    draw_letter(angle_x, angle_y, angle_z)\n",
        "\n",
        "def rotar_y(b):\n",
        "    global angle_y\n",
        "    angle_y = input_y.value\n",
        "    draw_letter(angle_x, angle_y, angle_z)\n",
        "\n",
        "def rotar_z(b):\n",
        "    global angle_z\n",
        "    angle_z = input_z.value\n",
        "    draw_letter(angle_x, angle_y, angle_z)\n",
        "\n",
        "def mostrar_figura(b):\n",
        "    draw_letter(angle_x, angle_y, angle_z)\n",
        "\n",
        "# Botones\n",
        "btn_x = widgets.Button(description=\"Rotar X\", button_style='info')\n",
        "btn_y = widgets.Button(description=\"Rotar Y\", button_style='info')\n",
        "btn_z = widgets.Button(description=\"Rotar Z\", button_style='info')\n",
        "btn_init = widgets.Button(description=\"Mostrar Figura\", button_style='success')\n",
        "\n",
        "btn_x.on_click(rotar_x)\n",
        "btn_y.on_click(rotar_y)\n",
        "btn_z.on_click(rotar_z)\n",
        "btn_init.on_click(mostrar_figura)\n",
        "\n",
        "# Interfaz completa\n",
        "display(widgets.VBox([\n",
        "    widgets.HBox([input_x, btn_x]),\n",
        "    widgets.HBox([input_y, btn_y]),\n",
        "    widgets.HBox([input_z, btn_z]),\n",
        "    btn_init,\n",
        "    out\n",
        "]))"
      ],
      "metadata": {
        "id": "lWyIv0_IY73l"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}